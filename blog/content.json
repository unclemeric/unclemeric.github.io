{"meta":{"title":"FE-Blog","subtitle":null,"description":null,"author":"Meric Lai","url":""},"pages":[{"title":"关于","date":"2018-10-17T07:05:14.000Z","updated":"2019-01-22T12:09:22.961Z","comments":true,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"前端开发，Coding,关注前端动态，对新技术的技术有追求。 123456789101112131415161718192021222324&#123; name: 'meric' age: 25, gender: '男', profession: 'Web Developer &amp; Designer', experience: '5年', github: 'https://github.com/unclemeric', email: 'laisf@hwagain.com', description: 'Hwagain Front-End Developer', skills: [ ['Html', 'Javascript', 'jQuery', 'CSS', 'ES6', 'Node'], ['Webpack', 'Gulp'], ['Sass'], ['Git', 'SVN'], ['Vue','React'], ['Bootstrap'] ], devTools: [ ['Sublime Text', 'Visual Studio Code', 'Webstorm'], ['Chrome DevTools'] ]&#125;"},{"title":"项目","date":"2018-10-19T08:52:44.000Z","updated":"2019-01-22T12:09:22.963Z","comments":true,"path":"repository/index.html","permalink":"/repository/index.html","excerpt":"","text":""},{"title":"友链","date":"2018-10-19T08:57:03.000Z","updated":"2019-01-22T12:09:22.963Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-10-19T07:55:50.000Z","updated":"2019-01-22T12:09:22.963Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2019-01-22T12:09:22.948Z","updated":"2019-01-22T12:09:22.948Z","comments":true,"path":"2019/01/22/hello-world/","link":"","permalink":"/2019/01/22/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"Vuex状态持久化存储之vuex-persistedstate","slug":"vuex-persistedstate","date":"2018-11-13T07:09:26.000Z","updated":"2019-01-22T12:09:22.961Z","comments":true,"path":"2018/11/13/vuex-persistedstate/","link":"","permalink":"/2018/11/13/vuex-persistedstate/","excerpt":"","text":"vuex-persistedstatePersist and rehydrate your Vuex state between page reloads. Requirements Vue.js (v2.0.0+) Vuex (v2.0.0+) Installation1$ npm install vuex-persistedstate Usage 123456import createPersistedState from 'vuex-persistedstate'const store = new Vuex.Store(&#123; // ... plugins: [createPersistedState()]&#125;) Nuxt.jsIt is possible to use vuex-persistedstate with Nuxt.js. Due to the order code is loaded in, vuex-persistedstate must be included as a NuxtJS plugin: 12345// nuxt.config.js...plugins: [&#123; src: '~/plugins/localStorage.js', ssr: false &#125;]... 12345678910111213// ~/plugins/localStorage.jsimport createPersistedState from 'vuex-persistedstate'export default (&#123;store&#125;) =&gt; &#123; window.onNuxtReady(() =&gt; &#123; createPersistedState(&#123; key: 'yourkey', paths: [...] ... &#125;)(store) &#125;)&#125; APIcreatePersistedState([options])Creates a new instance of the plugin with the given options. The following optionscan be provided to configure the plugin for your specific needs: key &lt;String&gt;: The key to store the persisted state under. (default: vuex) paths &lt;Array&gt;: An array of any paths to partially persist the state. If no paths are given, the complete state is persisted. (default: []) reducer &lt;Function&gt;: A function that will be called to reduce the state to persist based on the given paths. Defaults to include the values. subscriber &lt;Function&gt;: A function called to setup mutation subscription. Defaults to store =&gt; handler =&gt; store.subscribe(handler) storage &lt;Object&gt;: Instead for (or in combination with) getState and setState. Defaults to localStorage. getState &lt;Function&gt;: A function that will be called to rehydrate a previously persisted state. Defaults to using storage. setState &lt;Function&gt;: A function that will be called to persist the given state. Defaults to using storage. filter &lt;Function&gt;: A function that will be called to filter any mutations which will trigger setState on storage eventually. Defaults to () =&gt; true arrayMerger &lt;Function&gt;: A function for merging arrays when rehydrating state. Defaults to function (store, saved) { return saved } (saved state replaces supplied state). Customize StorageIf it’s not ideal to have the state of the Vuex store inside localstorage. One can easily implement the functionality to use cookies for that (or any other you can think of); 123456789101112131415161718import &#123; Store &#125; from 'vuex'import createPersistedState from 'vuex-persistedstate'import * as Cookies from 'js-cookie'const store = new Store(&#123; // ... plugins: [ createPersistedState(&#123; storage: &#123; getItem: key =&gt; Cookies.get(key), // Please see https://github.com/js-cookie/js-cookie#json, on how to handle JSON. setItem: (key, value) =&gt; Cookies.set(key, value, &#123; expires: 3, secure: true &#125;), removeItem: key =&gt; Cookies.remove(key) &#125; &#125;) ]&#125;) In fact, any object following the Storage protocol (getItem, setItem, removeItem, etc) could be passed: 1createPersistedState(&#123; storage: window.sessionStorage &#125;) This is especially useful when you are using this plugin in combination with server-side rendering, where one could pass an instance of dom-storage. ⚠️ LocalForage ⚠️As it maybe seems at first sight, it’s not possible to pass a LocalForage instance as storage property. This is due the fact that all getters and setters must be synchronous and LocalForage’s methods are asynchronous. LicenseMIT © Robin van der Vleuten","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"/tags/vue/"},{"name":"vuex","slug":"vuex","permalink":"/tags/vuex/"},{"name":"localstorage","slug":"localstorage","permalink":"/tags/localstorage/"},{"name":"plugins","slug":"plugins","permalink":"/tags/plugins/"}]},{"title":"layui-router项目介绍","slug":"layui-router","date":"2018-10-31T06:22:05.000Z","updated":"2019-01-22T12:09:22.949Z","comments":true,"path":"2018/10/31/layui-router/","link":"","permalink":"/2018/10/31/layui-router/","excerpt":"","text":"Layui 的路由版本。Layui 还有 iframe 版本，iframe 版特点是： 基于 iframe 标签页实现，简单实用 传统开发模式，撸起袖子直接开干 交互体验相比“单页版”略有点欠缺 路由版比较 iframe 版，有下列好处: 单页面应用方案，所有操作无需跳转 采用前后端分离开发模式，上手略难 更友好的交互体验，减轻浏览器负载 表面上最明显的特点就是浏览器地址栏，iframe 版 url 是这样:不同的页面，地址栏居然一样？？？ 另一边 router 版的是这样：跟想象的一样，每个 url 对应不同的界面。 当我们按浏览器返回或者前进按钮时，iframe 版会出现问题，不能正确的返回或前进页面，而 router 版则没有这种问题。 项目结构12345678910111213141516171819202122232425262728├─json //模拟数据文件(相当于api接口列表)│ ├─layim│ ├─message│ ├─user│ └─workorder├─layui //layui资源文件(插件，里面代码无需理会)│ ├─css│ ├─font│ ├─images│ └─lay├─pages //页面相关文件│ ├─controller //页面控制层│ ├─lib //插件文件│ │ └─extend│ ├─pro //layui框架文件(与router相关)│ ├─style //自定义样式文件│ │ └─res│ └─views //页面相关模块存放路径│ ├─app //app模块界面│ │ └─workorder│ ├─home //home主页模块界面│ ├─senior //...│ ├─system //...│ ├─template //...│ ├─user //...│ ├─config.js //项目相关配置文件│ └─index.js //router功能代码└─index.html //index入口文件 路由执行过程 部分代码讲解 路由跳转 1location.hash = '/home/homepage1' 页面代码 page/views/home/homepage1.html： 123456789101112131415161718192021222324252627282930&lt;title&gt;主页一&lt;/title&gt;&lt;div class=\"layui-card layadmin-header\"&gt; &lt;div class=\"layui-breadcrumb\" lay-filter=\"breadcrumb\"&gt; &lt;a lay-href=\"\"&gt;主页&lt;/a&gt; &lt;a&gt;&lt;cite&gt;主页一&lt;/cite&gt;&lt;/a&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class=\"layui-fluid\"&gt; &lt;div class=\"layui-row layui-col-space15\"&gt; &lt;div class=\"layui-col-md4\"&gt; &lt;div class=\"layui-card\"&gt; &lt;div class=\"layui-card-header\"&gt;八卦新闻&lt;/div&gt; &lt;div class=\"layui-card-body\"&gt; &lt;div class=\"layui-carousel layadmin-carousel layadmin-dataview\" data-anim=\"fade\" lay-filter=\"LAY-index-pageone\"&gt; &lt;div carousel-item id=\"LAY-index-pageone\"&gt; &lt;div&gt;&lt;i class=\"layui-icon layui-icon-loading1 layadmin-loading\"&gt;&lt;/i&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;script&gt; layui.use('sample', layui.factory('sample'));//引入控制层/page/controller/simple.js&lt;/script&gt; js 代码 /page/controller/simple.js 123456789101112131415161718192021222324layui.define(function(e) &#123; var a = layui.admin layui.use(['admin', 'carousel'], function() &#123; ... //渲染跑马灯 e('.layadmin-carousel').each(function() &#123; var l = e(this) a.render(&#123; elem: this, width: '100%', arrow: 'none', interval: l.data('interval'), autoplay: l.data('autoplay') === !0, trigger: t.ios || t.android ? 'click' : 'hover', anim: l.data('anim') &#125;) &#125;) &#125;), //渲染图表 layui.use(['carousel', 'echarts'], function() &#123; ... &#125;), e('sample', &#123;&#125;)//定义controller层名字&#125;) 最后此 demo 中的各个插件的用法，由于模板是通过手工爬出来的，没有说明文档，但基本的 layui 用法和 iframe 类似，复杂的插件具体用到还需自行琢磨研究。","categories":[],"tags":[{"name":"layui","slug":"layui","permalink":"/tags/layui/"},{"name":"router","slug":"router","permalink":"/tags/router/"}]},{"title":"vue-cli使用build命令编译css顺序错乱问题","slug":"vue-cli-load-css-confusion","date":"2018-10-26T09:37:24.000Z","updated":"2019-01-22T12:09:22.959Z","comments":true,"path":"2018/10/26/vue-cli-load-css-confusion/","link":"","permalink":"/2018/10/26/vue-cli-load-css-confusion/","excerpt":"","text":"最近用 vue-cli 做一个项目引入了 bootstrap 的 css 本来是想组件内的 css 覆盖掉 bootstrap 的 css，但是打包了之后 bootstrpa 的 css 样式被打包到我所写样式的后面，原因是因为在 main.css 引入 bootstrap 顺序的原因 解决办法","categories":[],"tags":[]},{"title":"VS Code 代码格式化配置","slug":"about-IDE-format-code","date":"2018-10-19T07:10:43.000Z","updated":"2019-01-22T12:09:22.944Z","comments":true,"path":"2018/10/19/about-IDE-format-code/","link":"","permalink":"/2018/10/19/about-IDE-format-code/","excerpt":"","text":"目的统一代码格式，美化代码。 配置首先，vetur 默认设置是这个样的。也就是很多是用的 prettier 插件。打开文件 -&gt; 首选项 -&gt; 设置的用户设置加入下列配置信息： 123456789101112131415161718192021222324252627282930313233&quot;git.autofetch&quot;: false,// 控制终端游标是否闪烁。&quot;terminal.integrated.cursorBlinking&quot;: true,&quot;editor.fontFamily&quot;: &quot;Consolas&quot;,&quot;vetur.format.defaultFormatter.css&quot;: &quot;prettier&quot;,&quot;vetur.format.defaultFormatter.postcss&quot;: &quot;prettier&quot;,&quot;vetur.format.defaultFormatter.scss&quot;: &quot;prettier&quot;,&quot;vetur.format.defaultFormatter.less&quot;: &quot;prettier&quot;,&quot;vetur.format.defaultFormatter.stylus&quot;: &quot;stylus-supremacy&quot;,&quot;vetur.format.defaultFormatter.js&quot;: &quot;prettier&quot;,&quot;vetur.format.defaultFormatter.ts&quot;: &quot;prettier&quot;,// &quot;[javascript]&quot;: &#123;// &quot;editor.formatOnSave&quot;: true// &#125;,&quot;[css]&quot;: &#123; &quot;editor.formatOnSave&quot;: true&#125;,&quot;[scss]&quot;: &#123; &quot;editor.formatOnSave&quot;: true&#125;,&quot;[vue]&quot;: &#123; &quot;editor.formatOnSave&quot;: true&#125;,&quot;prettier.tabWidth&quot;: 2,//取消js单引号自动转换成双引号&quot;prettier.semi&quot;: false,&quot;prettier.singleQuote&quot;: true,&quot;[markdown]&quot;: &#123; &quot;editor.formatOnSave&quot;: true, &quot;editor.wordWrap&quot;: &quot;on&quot;, &quot;editor.renderWhitespace&quot;: &quot;all&quot;, &quot;editor.acceptSuggestionOnEnter&quot;: &quot;off&quot;&#125; 编辑器配置在项目文件中新建.editorconfig文件为特定类型指定缩进大小、缩进类型(空格或 tab)，是否自动插入末行等。 123456789101112131415# editorconfig.orgroot = true[*]charset = utf-8indent_size = 4indent_style = spaceinsert_final_newline = truetrim_trailing_whitespace = true[*.md]trim_trailing_whitespace = false","categories":[],"tags":[{"name":"vs code","slug":"vs-code","permalink":"/tags/vs-code/"},{"name":"formatter","slug":"formatter","permalink":"/tags/formatter/"},{"name":"setting","slug":"setting","permalink":"/tags/setting/"}]},{"title":"FE-Blog项目说明","slug":"FE-Blog","date":"2018-10-18T00:39:32.000Z","updated":"2019-01-22T12:09:22.943Z","comments":true,"path":"2018/10/18/FE-Blog/","link":"","permalink":"/2018/10/18/FE-Blog/","excerpt":"","text":"说明本项目是一个交流与分享经验的博客，记录我们项目开发或者学习中积累的一些经验和技术，分享他人。使用Hexo框架快速搭建。Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 相关知识技术请查看文档：Hexo 官网文档：Hexo 文档说明Markdown 文档：Markdown 文档说明 hexo-theme-pureHexo默认带的主题是landscape，但本项目使用hexo-theme-pure(可点击)主题(此推荐使用Hexo 主题使用)，个人喜好。此项目由于gitlab上传失败自定义主题(反正我上传失败了…未知原因)，单单是自定义主题上传失败，系统默认主题成功上传了，所以提交的时候改为了landscape。有兴趣的同学可以clone下来之后，参照Hexo-Theme-Pure(可点击)这篇文章说明修改主题和相关主题功能配置。 项目安装首先安装 hexo 构建工具(构建项目和页面使用)： 1npm install hexo-cli -g //安装全局命令 安装依赖1npm install //安装全局命令 项目启动12345hexo serverorhexo s //hexo server的简写ornpm start (package.json里自定义的启动脚本) 项目启动完毕！ ftp 一键发布自己写的一段代码使用node一键发布项目(懒人福利)，自带备份功能。通过配置一系列参数之后，执行自定义脚本npm run deploy。相关文件包括：app.jssftp.config.js 一键发布相关参数配置说明sftp.config.js 123456789101112131415161718192021const path = require(&quot;path&quot;);//服务器项目根路径const remote_path = &quot;/data/webapps/hwagain-web/blog&quot;;//存放编译之后资源文件夹 此项目需同_config.yml的public_dir值一样 Vue项目为./distconst assets_path = path.resolve(__dirname, &quot;./public&quot;);module.exports = &#123; remote_path, assets_path, options: &#123; host: &quot;192.168.68.207&quot;,//ftp服务器ip port: &quot;22&quot;,//端口 user: &quot;portal&quot;,//ftp用户名 password: &quot;portal&quot;,//ftp密码 // privateKey: fs.readFileSync(&quot;C:/Users/laisf/.ssh/id_rsa&quot;), // 私钥 passphrase: &quot;&quot; // 私钥密码(为空) &#125;, project_remote_path: remote_path, //项目服务器路径 public_asset_path: assets_path //指定需要上传的文件夹目录&#125;; 一键发布12345678npm run deploy (package.json里自定义的启动脚本)or/*** hexo clean: 清除缓存及上次编译生成的静态文件* hexo generate: 编译将博客生成静态文件* node app.js: 一键发布到ftp服务器*/hexo clean &amp;&amp; hexo generate &amp;&amp; node app.js","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"/tags/blog/"},{"name":"hexo","slug":"hexo","permalink":"/tags/hexo/"},{"name":"hexo-theme","slug":"hexo-theme","permalink":"/tags/hexo-theme/"},{"name":"sftp","slug":"sftp","permalink":"/tags/sftp/"},{"name":"一键发布","slug":"一键发布","permalink":"/tags/一键发布/"},{"name":"node","slug":"node","permalink":"/tags/node/"}]},{"title":"Hexo-Theme-Pure","slug":"hexo-theme-pure","date":"2018-10-17T06:31:57.000Z","updated":"2019-01-22T12:09:22.948Z","comments":true,"path":"2018/10/17/hexo-theme-pure/","link":"","permalink":"/2018/10/17/hexo-theme-pure/","excerpt":"","text":"pureA brand new default theme for [Hexo]. Preview | English documentation | iconfont 特色 多语言 第三方评论框（友言、来必力、gitment、gitalk） 可展示个人豆瓣书单 可展示个人 github 托管项目 可设置支付宝、微信打赏 页面展示首页 | 归档 | 分类 | 标签 | 项目 | 书单 | 友链 | 关于 配置说明在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。为了描述方便，在以下说明中，将前者称为站点配置文件， 后者称为主题配置文件 安装主题1git clone https://github.com/cofess/hexo-theme-pure.git themes/pure 更新主题12cd themes/puregit pull 启用 pure 主题打开站点配置文件，找到 theme 字段，将其值更改为 pure 1theme: pure 到此，主题安装完成。然后启动 Hexo 服务验证主题是否正确启用。 1hexo s 安装插件hexo-wordcount1npm install hexo-wordcount --save hexo-generator-json-content1npm install hexo-generator-json-content --save hexo-generator-feed1npm install hexo-generator-feed --save hexo-generator-sitemap1npm install hexo-generator-sitemap --save hexo-generator-baidu-sitemap1npm install hexo-generator-baidu-sitemap --save 主题配置设置语言打开站点配置文件, 将 language 设置成你所需要的语言。建议明确设置你所需要的语言,可选值对应 themes\\pure\\languages 目录下语言文件，简体中文配置如下： 1language: zh-CN 主题颜色定制了五套颜色，默认白，黑:theme-black，蓝:theme-blue，绿:theme-green，紫:theme-purple 123# configconfig: skin: # 主题颜色 theme-black theme-blue theme-green theme-purple 导航菜单12345678910111213141516171819202122# 导航菜单menu: Home: . Archives: archives # 归档 Categories: categories # 分类 Tags: tags # 标签 Repository: repository # github repositories Books: books # 书单 Links: links # 友链 About: about # 关于# 导航菜单图标（font awesome）menu_icons: enable: true # 是否启用菜单图标 home: icon-home-fill archives: icon-archives-fill categories: icon-folder tags: icon-tags repository: icon-project books: icon-book-fill links: icon-friendship about: icon-cup-fill 设置个人信息123头像在themes\\pure\\source\\images 目录下替换图片即可，捐献的二维码同理。个人信息大部分都在 主题配置文件 中设置 搜索主题内置三种站内搜索方式：insight、swiftype、baidu 12345# Searchsearch: insight: true # you need to install `hexo-generator-json-content` before using Insight Search swiftype: # enter swiftype install key here baidu: false # you need to disable other search engines to use Baidu search 分享支持weibo,qq,qzone,wechat,tencent,douban,diandian,facebook,twitter,google,linkedin 123456# Share# weibo,qq,qzone,wechat,tencent,douban,diandian,facebook,twitter,google,linkedinshare: enable: true # 是否启用分享 sites: weibo,qq,wechat,facebook,twitter # PC端显示的分享图标 mobile_sites: weibo,qq,qzone # 移动端显示的分享图标 评论主题集成了disqus、友言、来必力、gitment、gitalk评论系统，选择其中一种即可 12345678910111213141516# Comment# Gitment# Introduction: https://imsun.net/posts/gitment-introduction/comment: type: livere # 启用哪种评论系统 disqus: # enter disqus shortname here youyan: uid: *** # enter youyan uid livere: uid: *** # enter livere uid gitment: githubID: username repo: username.github.io ClientID: *** ClientSecret: *** lazy: false 文章浏览量统计主题内置了不蒜子和 leancloud 来统计文章浏览量，启用其中之一即可，注意 leancloud 需要到其官网申请 APP ID 和 APP Key。 比如，启用不蒜子来统计文章浏览量，在主题配置文件中把 busuanzi 设置为 true 即可： 123pv: busuanzi: enable: true # 不蒜子统计 如果不需要第三方来统计浏览量，只需将相应设置改为 false 即可（设置为 false 后不会加载第三方 JS 脚本） Github respostory复制theme/pure/_source/ 目录下repository文件夹到blog path/source/ 目录下 123# Githubgithub: username: *** # github username 豆瓣书单复制theme/pure/_source/ 目录下books文件夹到blog path/source/ 目录下 12345# douban 豆瓣书单douban: user: *** # 豆瓣用户名 start: 0 # 从哪一条记录开始 count: 100 # 获取豆瓣书单数据条数 友情链接复制theme/pure/_source/ 目录下links文件夹到blog path/source/ 目录下 在 hexo 目录下的 source 文件夹内创建一个名为 _data（禁止改名）的文件夹。 然后在文件内创建一个名为 links.yml 的文件,在其中添加相关数据即可。 单个友情链接的格式为： 1234Name: link: http://example.com avatar: http://example.com/avatar.png desc: &quot;这是一个描述&quot; 添加多个友情链接，我们只需要根据上面的格式重复填写即可。 . 将 Name 改为友情链接的名字，例如 Cofess。 . http://example.com 为友情链接的地址。 . http://example.com/avatar.png 为友情链接的头像。 . 这是一个描述 为友情链接描述。 文章索引目录123456title: 文章标题categories: - 文章分类tags: - 文章标签toc: true # 是否启用内容索引 sidebar 侧边栏文章侧边栏默认为开启状态，如果某篇文章不想开启侧边栏，在文章开头配置加入“sidebar: none”即可： 123456title: 文章标题categories: - 文章分类tags: - 文章标签sidebar: none # 是否启用sidebar侧边栏，none：不启用 博客优化hexo-neat auto Minify html、js、css and make it neat 1npm install hexo-neat --save 在博客配置文件_config.yml中添加 12345678910111213141516# hexo-neatneat_enable: trueneat_html: enable: true exclude:neat_css: enable: true exclude: - &apos;*.min.css&apos;neat_js: enable: true mangle: true output: compress: exclude: - &apos;*.min.js&apos; hexo-baidu-url-submit1npm install hexo-baidu-url-submit --save hexo-translate-title 使用 Google 翻译，百度翻译和有道翻译将 Hexo 中的汉字标题转成英文标题 安装 1npm install hexo-translate-title --save 在博客配置文件_config.yml中添加 123456translate_title: translate_way: google #google | baidu | youdao youdao_api_key: XXX youdao_keyfrom: XXX is_need_proxy: true #true | false proxy_url: http://localhost:8123 注意：判断是否需要配置 google 本地代理，因为我在本地是开启时才能访问 google 翻译的，如果没有被墙，请将_config.yml 下的is_need_proxy: true改为 false。如果设置为 true,请设置本地代理地址 数学公式 Hexo 默认使用”hexo-renderer-marked”引擎渲染网页，该引擎会把一些特殊的 markdown 符号转换为相应的 html 标签 解决方案解决方案有很多，可以网上搜下，为了节省大家的时间，这里只提供亲身测试过的方法。 更换 Hexo 的 markdown 渲染引擎，hexo-renderer-markdown-it-plus引擎替换默认的渲染引擎hexo-renderer-marked即可。 安装 hexo-renderer-markdown-it-plus 插件12npm un hexo-renderer-marked --savenpm i hexo-renderer-markdown-it-plus --save 配置安装插件后，如果未正常渲染 LaTeX 数学公式，在博客配置文件_config.yml中添加 12345678910111213141516markdown_it_plus: highlight: true html: true xhtmlOut: true breaks: true langPrefix: linkify: true typographer: quotes: “”‘’ plugins: - plugin: name: markdown-it-katex enable: true - plugin: name: markdown-it-mark enable: false 文章启用 mathjax12title: Hello Worldmathjax: true","categories":[],"tags":[{"name":"hexo-theme-pure","slug":"hexo-theme-pure","permalink":"/tags/hexo-theme-pure/"}]},{"title":"Vue项目常见错误及解决方式","slug":"vue-template-error-collection","date":"2018-10-17T03:47:43.000Z","updated":"2019-01-22T12:09:22.960Z","comments":true,"path":"2018/10/17/vue-template-error-collection/","link":"","permalink":"/2018/10/17/vue-template-error-collection/","excerpt":"","text":"安装超时(install timeout) cnpm : 国内对 npm 的镜像版本 12npm install -g cnpm --registry=https://registry.npm.taobao.org// cnpm 的大多命令跟 npm 的是一致的,比如安装,卸载这些复制代码 yarn 和 npm 改源 123使用 nrm 模块 : www.npmjs.com/package/nrmnpm config : npm config set registry https://registry.npm.taobao.orgyarn config : yarn config set registry https://registry.npm.taobao.org can’t not find ‘xxModule’ - 找不到某些依赖或者模块 这种情况一般报错信息可以看到是哪个包抛出的信息.一般卸载这个模块,安装重新安装下即可. data functions should return an object 这个问题是 Vue 实例内,单组件的 data 必须返回一个对象;如下 12345678910111213export default &#123; name: 'page-router-view', data() &#123; return &#123; tabs: [ &#123; title: '帐号信息', url: '/userinfo/base' &#125; ] &#125; &#125;&#125; 为什么要 return 一个数据对象呢?官方解释如下: data 必须声明为返回一个初始数据对象的函数，因为组件可能被用来创建多个实例。如果 data 仍然是一个纯粹的对象，则所有的实例将共享引用同一个数据对象！简言之,组件复用下,不会造成数据同时指向一处,造出牵一发而动全身的问题 在函数内用了 this.xxx=,为什么抛出 Cannot set property ‘xxx’ of undefined; 这又是 this 的套路了..this 是和当前运行的上下文绑定的…一般你在 axios 或者其他 promise , 或者 setInterval 这些默认都是指向最外层的全局钩子.简单点说:”最外层的上下文就是 window,vue 内则是 Vue 对象而不是实例!”;解决方案: 暂存法: 函数内先缓存 this , let that = this;(let 是 es6, es5 用 var)箭头函数: 会强行关联当前运行区域为 this 的上下文; Component template shold contain exactly one root element.If you are useing v-if on multiple elements , xxxxx 单组件渲染 DOM 区域必须要有一个根元素,不能出现同级元素.可以用 v-if 和 v-else-if 指令来控制其他元素达到并存的状态换个直白的解释,就是有一个唯一的父类,包裹者;比如一个 div(父包含块) 内部多少个同级或者嵌套都行,但是最外层元素不能出现同级元素!!!! No ‘Access-Control-Allow-Origin’ header is present on the requested resource. nginx 反向代理 webpack proxy 配置(开发环境下) 1234567891011// 在 config 目录下的index.jsproxyTable: &#123; \"/bp-api\": &#123; target: \"http://new.d.st.cn\", changeOrigin: true, // pathRewrite: &#123; // \"^/bp-api\": \"/\" // &#125; &#125;&#125; 修改本地 host 文件 改成相同的二级域名例如 xxx.hwagain.com 后台设置可跨域 jsonp，不过局限性比较多,比较适合一些特殊的信息获取! Error in render function:”Type Error: Cannot read property ‘xxx’ of undefined” Uncaught ReferenceError: xxx is not define TypeError: xxx is not a function 安装模块时命令窗口输出 unsupported platform xxx 一般两种情况,node 版本不兼容,系统不兼容; Failed to mount component: template or render function not defined 组件没有正确引入(或组件文件内容为空) 挂载点顺序错了 Unknown custom element: &lt;xxx&gt; - did you register the component correctly? 组件未导入对应的组件或者组件引入了但是未在 components 声明注册 axios 的 post 请求后台接受不到 axios 默认是 json 格式提交,确认后台是否做了对应的支持;若是只能接受传统的表单序列化,就需要自己写一个转义的方法.当然还有一个更加省事的方案,引入qs，使用qs.stringify(params)转义参数 Module not found: Error : Can’t resolve xxx-loader in xxxx 这里问题一般就是 webpack 的配置文件你改动了或对应的 loader 没有装上 npm run dev 报端口错误!Error: listen EADDRINUSE :::8080 端口被占用，在 config/index.js 修改开发环境下的端口号 什么时候用 v-if,什么用 v-show 我们先来说说两者的核心差异;v-if : DOM 区域没有生成,没有插入文档..等条件成立的时候才动态插入到页面!有些需要遍历的数组对象或者值,最好用这货控制,等到拿到值才处理遍历,不然一些操作过快的情况会报错,比如数据还没请求到!v-show: DOM 区域在组件渲染的时候同时渲染了,只是单纯用 css 隐藏了对于下拉菜单,折叠菜单这些数据基本不怎么变动.用这个最合适了..而且可以改善用户体验,因为它不会导致页面的重绘,DOM 操作会!简言之: DOM 结构不怎么变化的用 v-show, 数据需要改动很大或者布局改动的用 v-if 单组件中里面的 import xxx from ‘@/components/layout/xxx’中的@是什么 webpack 可以配置 alias(也就是路径别名),文件名: build -&gt; webpack.base.conf.js 12345678resolve: &#123; extensions: [\".js\", \".vue\", \".json\"], // 可以导入的时候忽略的拓展名范围 alias: &#123; vue$: \"vue/dist/vue.esm.js\", \"@\": resolve(\"src\"), // 这里就是别名了,比如@就代表直接从/src 下开始找起!!! \"~\": resolve(\"src/components\") &#125; &#125; SyntaxError: Unexpected identifier; 语法错误,看错误信息去找到对应的页面排查","categories":[],"tags":[{"name":"error","slug":"error","permalink":"/tags/error/"},{"name":"vue","slug":"vue","permalink":"/tags/vue/"},{"name":"npm","slug":"npm","permalink":"/tags/npm/"},{"name":"webpack","slug":"webpack","permalink":"/tags/webpack/"}]},{"title":"Layui项目常见错误及解决方式","slug":"layui-template-error-collection","date":"2018-10-17T02:46:37.000Z","updated":"2019-01-22T12:09:22.955Z","comments":true,"path":"2018/10/17/layui-template-error-collection/","link":"","permalink":"/2018/10/17/layui-template-error-collection/","excerpt":"","text":"try running: npm install xxx 错误提示try running: npm install gulp，表示未安装相关依赖，按照提示执行命令安装相关依赖。 layui.js:2 GET http://xxx/xx.xx net::ERR_ABORTED 404 (Not Found) 1.当页面显示异常或者自己觉得出错了，首先打开浏览器控制台 console（F12）查看有没有报错，然后根据报错去判断引发问题的每一个点。例如这个错误，按 F12 打开控制台,发现console报了两个错，一个是 js 的404错误，首先想一下在什么地方引入了index1.js这个文件，然后确定一下文件存不存在。打开index.html，可以看到引入了index1文件，然是左边文件夹里并没有这个文件，所以这个问题是由于文件名写错了。2.有的人可能会发现图 1 的控制台报了两个错误，第一个可能知道是文件路径不对，但是第 2 个报错并不清楚是因为什么引起的。这里特别提醒找错误不要从下往上看，先解决第一个出现的错误，解决完刷新页面再看后面的错误，也不要纠结一定所有问题一次解决。这里我们把第一个问题解决之后，发现第二个问题是由于第一个问题引起的，解决了第一个问题第二个问题也没有再出现 打包编译事项注意 发布的时候注意 config.js 的两个变量isProduction:false，isDevelopment:false，测试环境的时候只需把isDevelopment改为true，正式环境只需把isProduction改为true，本地开发的时候把两个都设置成false。 请求无法回数据或者返回失败，看看是不是未登录或者跨域问题。","categories":[],"tags":[{"name":"layui","slug":"layui","permalink":"/tags/layui/"},{"name":"javascript","slug":"javascript","permalink":"/tags/javascript/"},{"name":"js","slug":"js","permalink":"/tags/js/"},{"name":"error","slug":"error","permalink":"/tags/error/"}]},{"title":"Use-Hacker-theme","slug":"use-Hacker-theme","date":"2018-10-17T02:45:19.000Z","updated":"2019-01-22T12:09:22.958Z","comments":true,"path":"2018/10/17/use-Hacker-theme/","link":"","permalink":"/2018/10/17/use-Hacker-theme/","excerpt":"","text":"Hacker | English Docs Hacker 是一款专注于写作的简洁博客主题。在如此讲究复杂排版的趋势下，选择回归本源，专注于写作这件事。 一开始是moyo为 Wordpress 所创作的一个主题，由 DaraW 移植到 Hexo。 Demo参考我的博客：DaraW 安装获得主题文件， git clone或者download zip均可； 在themes文件夹中创建文件夹Hacker，将主题文件都复制粘贴至Hacker文件夹； 然后在 hexo 全局配置文件_config.yml中应用主题： 1theme: Hacker 这样就安装好了，开始享受吧~ 注意：版本更新后建议在 hexo 生成前执行一次hexo clean，清除以前的缓存，避免带来的一些莫名其妙的问题。 配置启用评论和谷歌分析在主题配置文件_config.yml中： 12345678910111213# gitmentgitment: falsegitment_owner:gitment_repo:gitment_client_id:gitment_client_secret:# disqus commentdisqus: falsedisqus_shortname:# google analyticsgoogleTrackId: gitment: boolean，是否开启 gitment 评论gitment_owner: string，你的 GitHub IDgitment_repo: string，存储评论的 repogitment_client_id: string，你的 client IDgitment_client_secret: string，你的 client secret disqus: boolean，是否开启 disqus 评论；disqus_shortname: string，你的 disqus site shortname。 googleTrackId: string，为谷歌分析的个人 ID，留空则为不使用谷歌分析。 启用分类和标签页面分类功能：执行hexo new page categories，然后修改生成的source/categories/index.md： 12345title: categoriesdate: 2017-01-30 19:16:17layout: \"categories\"--- 如果你需要关闭该页的评论，可以添加一行comments: false；title对应的则是该页的标题。 标签功能：同理，执行hexo new page tags，然后修改生成的source/tags/index.md： 12345title: tagsdate: 2017-01-30 19:16:17layout: \"tags\"--- 配置同分类功能。 在菜单中添加链接：编辑主题的_config.yml，在menu中添加Categories: /categories和Tags: /tags，如下： 12345menu: Home: / Archives: /archives Categories: /categories Tags: /tags 更新v1.2.0 增加gitment支持 移除多说 v1.1.0 增加对关闭文章评论的支持(issue#14) 增加对分类和标签的支持(issue#7) v1.0.1 修复了主页上错误的评论链接 v1.0 修复从文件夹导致的 bug(issue#10) 修复code标签的显示效果 v0.3 重构 ejs 模板 改用 stylus 添加英文文档 v0.2 去除部分无用 css 和重复 css 修复无分类/标签依然出现 icon 的 bug 重写归档列表页面 修改代码块样式 协议GNU GPL(General Public License) v2.0","categories":[],"tags":[{"name":"hexo-theme-Hacker","slug":"hexo-theme-Hacker","permalink":"/tags/hexo-theme-Hacker/"}]}]}